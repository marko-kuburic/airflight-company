{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\danil\\\\OneDrive\\\\Desktop\\\\CetvrtaGod\\\\IIS\\\\projekat\\\\airflight-company\\\\frontend\\\\src\\\\pages\\\\BookingConfirmed.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Layout } from '../components/Layout';\nimport { BookingConfirmation } from '../components/BookingConfirmation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BookingConfirmed() {\n  _s();\n  const navigate = useNavigate();\n\n  // This data would come from the booking process/API response in a real app\n  // For now, using sample data that matches the design\n  const bookingData = {\n    ticketNumber: 'TCK-10218',\n    status: 'Confirmed / Paid',\n    flightDetails: {\n      flightNumber: 'FD-801',\n      route: 'BEG → CDG',\n      departure: '08:10',\n      arrival: '10:35',\n      class: 'Economy'\n    },\n    passengerName: 'Ana Petrović',\n    // Additional data that would come from backend\n    bookingReference: 'ABC123',\n    paymentAmount: '€142.00',\n    bookingDate: new Date().toISOString(),\n    email: 'ana.petrovic@email.com'\n  };\n  const handleDownloadTicket = async () => {\n    try {\n      // In a real app, this would call the backend API to generate PDF\n      // const response = await fetch(`/api/tickets/${bookingData.ticketNumber}/download`);\n      // const blob = await response.blob();\n      // const url = window.URL.createObjectURL(blob);\n      // const link = document.createElement('a');\n      // link.href = url;\n      // link.download = `ticket-${bookingData.ticketNumber}.pdf`;\n      // link.click();\n\n      // For now, just show a mock action\n      console.log('Downloading e-ticket for:', bookingData.ticketNumber);\n      alert('E-ticket download started! (This is a demo - no actual PDF will be downloaded)');\n    } catch (error) {\n      console.error('Error downloading ticket:', error);\n      alert('Error downloading ticket. Please try again.');\n    }\n  };\n  const handleGoToTickets = () => {\n    // Navigate to My Tickets page\n    navigate('/tickets');\n  };\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(BookingConfirmation, {\n      ticketNumber: bookingData.ticketNumber,\n      status: bookingData.status,\n      flightDetails: bookingData.flightDetails,\n      passengerName: bookingData.passengerName,\n      onDownloadTicket: handleDownloadTicket,\n      onGoToTickets: handleGoToTickets\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(BookingConfirmed, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = BookingConfirmed;\nvar _c;\n$RefreshReg$(_c, \"BookingConfirmed\");","map":{"version":3,"names":["React","useNavigate","Layout","BookingConfirmation","jsxDEV","_jsxDEV","BookingConfirmed","_s","navigate","bookingData","ticketNumber","status","flightDetails","flightNumber","route","departure","arrival","class","passengerName","bookingReference","paymentAmount","bookingDate","Date","toISOString","email","handleDownloadTicket","console","log","alert","error","handleGoToTickets","children","onDownloadTicket","onGoToTickets","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/danil/OneDrive/Desktop/CetvrtaGod/IIS/projekat/airflight-company/frontend/src/pages/BookingConfirmed.js"],"sourcesContent":["import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { Layout } from '../components/Layout';\r\nimport { BookingConfirmation } from '../components/BookingConfirmation';\r\n\r\nexport default function BookingConfirmed() {\r\n  const navigate = useNavigate();\r\n\r\n  // This data would come from the booking process/API response in a real app\r\n  // For now, using sample data that matches the design\r\n  const bookingData = {\r\n    ticketNumber: 'TCK-10218',\r\n    status: 'Confirmed / Paid',\r\n    flightDetails: {\r\n      flightNumber: 'FD-801',\r\n      route: 'BEG → CDG',\r\n      departure: '08:10',\r\n      arrival: '10:35',\r\n      class: 'Economy'\r\n    },\r\n    passengerName: 'Ana Petrović',\r\n    // Additional data that would come from backend\r\n    bookingReference: 'ABC123',\r\n    paymentAmount: '€142.00',\r\n    bookingDate: new Date().toISOString(),\r\n    email: 'ana.petrovic@email.com'\r\n  };\r\n\r\n  const handleDownloadTicket = async () => {\r\n    try {\r\n      // In a real app, this would call the backend API to generate PDF\r\n      // const response = await fetch(`/api/tickets/${bookingData.ticketNumber}/download`);\r\n      // const blob = await response.blob();\r\n      // const url = window.URL.createObjectURL(blob);\r\n      // const link = document.createElement('a');\r\n      // link.href = url;\r\n      // link.download = `ticket-${bookingData.ticketNumber}.pdf`;\r\n      // link.click();\r\n      \r\n      // For now, just show a mock action\r\n      console.log('Downloading e-ticket for:', bookingData.ticketNumber);\r\n      alert('E-ticket download started! (This is a demo - no actual PDF will be downloaded)');\r\n    } catch (error) {\r\n      console.error('Error downloading ticket:', error);\r\n      alert('Error downloading ticket. Please try again.');\r\n    }\r\n  };\r\n\r\n  const handleGoToTickets = () => {\r\n    // Navigate to My Tickets page\r\n    navigate('/tickets');\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <BookingConfirmation\r\n        ticketNumber={bookingData.ticketNumber}\r\n        status={bookingData.status}\r\n        flightDetails={bookingData.flightDetails}\r\n        passengerName={bookingData.passengerName}\r\n        onDownloadTicket={handleDownloadTicket}\r\n        onGoToTickets={handleGoToTickets}\r\n      />\r\n    </Layout>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,mBAAmB,QAAQ,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,eAAe,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EACzC,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;;EAE9B;EACA;EACA,MAAMQ,WAAW,GAAG;IAClBC,YAAY,EAAE,WAAW;IACzBC,MAAM,EAAE,kBAAkB;IAC1BC,aAAa,EAAE;MACbC,YAAY,EAAE,QAAQ;MACtBC,KAAK,EAAE,WAAW;MAClBC,SAAS,EAAE,OAAO;MAClBC,OAAO,EAAE,OAAO;MAChBC,KAAK,EAAE;IACT,CAAC;IACDC,aAAa,EAAE,cAAc;IAC7B;IACAC,gBAAgB,EAAE,QAAQ;IAC1BC,aAAa,EAAE,SAAS;IACxBC,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACrCC,KAAK,EAAE;EACT,CAAC;EAED,MAAMC,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACAC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAElB,WAAW,CAACC,YAAY,CAAC;MAClEkB,KAAK,CAAC,gFAAgF,CAAC;IACzF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjDD,KAAK,CAAC,6CAA6C,CAAC;IACtD;EACF,CAAC;EAED,MAAME,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAtB,QAAQ,CAAC,UAAU,CAAC;EACtB,CAAC;EAED,oBACEH,OAAA,CAACH,MAAM;IAAA6B,QAAA,eACL1B,OAAA,CAACF,mBAAmB;MAClBO,YAAY,EAAED,WAAW,CAACC,YAAa;MACvCC,MAAM,EAAEF,WAAW,CAACE,MAAO;MAC3BC,aAAa,EAAEH,WAAW,CAACG,aAAc;MACzCM,aAAa,EAAET,WAAW,CAACS,aAAc;MACzCc,gBAAgB,EAAEP,oBAAqB;MACvCQ,aAAa,EAAEH;IAAkB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAEb;AAAC9B,EAAA,CA5DuBD,gBAAgB;EAAA,QACrBL,WAAW;AAAA;AAAAqC,EAAA,GADNhC,gBAAgB;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}